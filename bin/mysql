#!/bin/bash
DOCKER_MYSQL_NAME=k-mysql

start () {
  IS_RUNNING=$(docker inspect -f '{{.State.Running}}' $DOCKER_MYSQL_NAME)

  if [ "$IS_RUNNING" == "true" ]; then
    printf "%sDocker image is already running. \n"
    exit
  fi

  if [ "$IS_RUNNING" == "false" ]; then
    printf "%sRestarting docker image: "
    docker start $DOCKER_MYSQL_NAME
    printf "%sDocker image has started. \n"
    exit
  fi

  printf "%sCreate dump folder if not exists. \n"
  mkdir -p dump/mysql

  if [ ! -e "./secrets/mysql" ]; then
    printf "%sSecret file ./secrets/mysql does not exist. \nExit. \n"
    exit
  fi

  printf "%sLoading secrets from ./secrets/mysql. \n"
  source ./secrets/mysql

  printf "%sValid configuration. Continue to start image. \n"

  docker run \
    --name $DOCKER_MYSQL_NAME \
    -v "$(pwd)/dump/mysql:/var/lib/mysql" \
    -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
    -p 3306:3306 \
    -d mysql:5.7
  
  printf "%sImage is running. \n"
}

stop () {
  printf "%sStop image: "
  docker stop $DOCKER_MYSQL_NAME
  printf "%sImage has stopped. \n"
}

sql_execute () {
  source ./secrets/mysql
  docker exec -i $DOCKER_MYSQL_NAME \
      /bin/bash -c "exec mysql -uroot -p$MYSQL_ROOT_PASSWORD" <<< "$2"
}

case $1 in
  'start')
    start
    ;;
  'stop')
    stop
    ;;
  'logs')
    printf "%sTailing logs from image"
    docker logs -f $DOCKER_MYSQL_NAME
    ;;
  'create')
    printf "%sCreating database. \n"
    sql_execute "CREATE DATABASE IF NOT EXISTS $2"
    printf "%sDatabase $2 has been created."
    ;;
  'drop')
    printf "%Dropping database. \n"
    sql_execute "DROP DATABASE IF EXISTS $2"
    printf "%sDatabase $2 has been removed."
    ;;
  'raw')
    printf "%Execute raw SQL against database. \n"
    sql_execute "$2"
    printf "%sQuery '$2' has been executed."
    ;;
  *)
    echo $"$(tput setaf 1) Invalid command. Usage: $0 {start|stop|logs}"
    exit 1
esac
